SVGEditor/
├─ README.md                      # *项目说明文档（功能介绍、编译说明）
├─ resources/                     # *资源文件（非代码）
│  └─ icons/                      # *界面图标
│     ├─ rect.png                 # *矩形工具图标
│     ├─ circle.png               # *圆形工具图标
│     └─ ...（其他图形工具图标）
├─ src/                           # 核心源代码
│  ├─ ui/                         # 视图层（View）
│  │  ├─ main/                    # *主窗口
│  │  │  ├─ ksvgeditor.h/.cpp     # *主窗口类（UI布局：工具栏、画布、属性面板）
│  │  │  └─ ksvgeditor.ui         # *Qt Designer界面文件
│  │  ├─ canvas/                  # *画布
│  │  │  └─ kcanvas.h/.cpp        # *画布渲染与鼠标事件处理
│  │  └─ widgets/                 # 自定义UI组件
│  │     ├─ kborderstylecombo.h/.cpp # 边框样式选择框（带预览）——————————————其实就是原来的kborderstylebutton.h/cpp文件
│  │     ├─ kcolorbutton.h/.cpp   # 颜色选择按钮—————————————————————————————通过之前的ksvgeditor.cpp（颜色选择逻辑）、kshapeparameter.cpp（全局颜色存储）
│  │     └─ kparameterwidget.h/.cpp # 属性设置面板（边框宽度/颜色等）————————实现文件：ksvgeditor.cpp（输入框逻辑）、kshapeparameter.cpp（全局宽度存储）
│  │
│  │								—————————————————————————————————————————新的widgets/所实现的功能在之前的文件里中具体的 实现文件 是：kshapeparameter.h、kshapeparameter.cpp、KShapeParameter是单例类，用于存储全局的绘图参数（边框样式、颜色、宽度等），图形对象（如KShape）在绘制时从该类获取参数。
│  │
│  ├─ model/                      # *模型层（Model）
│  │  ├─ shapes/                  # *图形模型
│  │  │  ├─ kshape.h/.cpp         # *图形基类（坐标/颜色/边框等属性）
│  │  │  ├─ krect.h/.cpp          # *矩形模型
│  │  │  ├─ kcircle.h/.cpp        # *圆形模型
│  │  │  ├─ khexagon.h/.cpp       # *六边形模型
│  │  │  └─ ...（其他图形子类）
│  │  └─ parameters/              # *参数模型
│  │     └─ kshapeparameter.h/.cpp # *全局绘图参数（单例模式）
│  ├─ controller/                 # 控制器层（Controller）
│  │  └─ ksvgeditorcontroller.h/.cpp # 主控制器（处理用户输入、协调Model与View）
│  └─ utils/                      # 工具类
│     ├─ kshapefactory.h/.cpp     # *图形工厂（创建图形实例）
│     └─ kexportutils.h/.cpp      # 导出工具（PNG/SVG导出）————————————————PNG 导出功能的实现代码位于 SVGEditor/KSVGEditor/ksvgeditor.cpp 文件中，具体函数为 KSVGEditor::onExportPNGBtnClicked
└─ CMakeLists.txt                 # 构建脚本（或.pro/.vcxproj文件）


-------------1------------------------------------------
如果是新增功能：
1.用户可以通过鼠标滚轮对画布进行缩放
2.选中图形后用户可以通过按ctrl+c和ctrl+v实现复制粘贴
3.支持通过 Ctr + A 选中当前画布上的所有图形
4.用户可以使用 Delete 键或右键菜单命令来删除选中的图形
5.仿照圆形增加一个椭圆形的绘制功能



哪些文件会负责实现这些功能？

1. 按住 Ctrl 后加滚轮放大缩小画布的缩放比例
此功能涉及鼠标滚轮事件以及 Ctrl 键状态的检测，需要在处理鼠标事件的文件中进行实现，主要涉及以下文件：SVGEditor/KSVGEditor/kcanvas.cpp
2. 选中图形后按 Ctrl+C 和 Ctrl+V 实现复制粘贴
此功能需要处理键盘事件，并且涉及图形的复制和粘贴操作，主要涉及以下文件：SVGEditor/KSVGEditor/kcanvas.cpp
3. 按 Ctrl+A 将画布上的图形全部选中
此功能同样需要处理键盘事件，主要涉及以下文件：SVGEditor/KSVGEditor/kcanvas.cpp

综上所述，实现这些新增功能主要需要修改 SVGEditor/KSVGEditor/kcanvas.cpp、SVGEditor/KSVGEditor/kshape.h 以及具体图形类文件（如 kcircle.h、krect.h 等）。

------------2-----------------------------------------
如果是新增功能：
1.svg保存与加载:用户可以通过菜单选项保存当前画布的内容为 svg 文件。用户可以通过菜单选项加载一个 svg 文件，加载后可以正常编辑 svg 文件的图形
2.SVG 中的 <text> 元素用于在 SVG 图像中添加文本内容，它允许你在指定的位置显示文本，并可以通过设置属性来控制文本的样式、字体、大小等功能
哪些文件会负责实现这些功能？

1. SVG 保存与加载功能
KSVGEditor 类相关文件ksvgeditor.h、ksvgeditor.cpp、kcanvas.h、kcanvas.cpp、kshape.h：需要在该头文件中添加新的函数声明，用于处理 SVG 保存和加载的操作。
2. SVG 中 <text> 元素添加文本内容功能
KSVGEditor 类相关文件ksvgeditor.h、ksvgeditor.cpp、kcanvas.h、kcanvas.cpp、ktextshape.h、ktextshape.cpp：添加新的函数声明，用于处理添加文本的操作。

-----------3---------------------------------------------
	环境版本 Qt5.14.2  +  Visual Studio 2019  +  QMake version 3.1  +  cmake version 3.31.0-rc1














