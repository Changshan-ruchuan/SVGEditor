SVGEditor/
├─ README.md                      # *项目说明文档（功能介绍、编译说明）
├─ resources/                     # *资源文件（非代码）
│  └─ icons/                      # *界面图标
│     ├─ rect.png                 # *矩形工具图标
│     ├─ circle.png               # *圆形工具图标
│     └─ ...（其他图形工具图标）
├─ src/                           # 核心源代码
│  ├─ ui/                         # 视图层（View）
│  │  ├─ main/                    # *主窗口
│  │  │  ├─ ksvgeditor.h/.cpp     # *主窗口类（UI布局：工具栏、画布、属性面板）
│  │  │  └─ ksvgeditor.ui         # *Qt Designer界面文件
│  │  ├─ canvas/                  # *画布
│  │  │  └─ kcanvas.h/.cpp        # *画布渲染与鼠标事件处理
│  │  └─ widgets/                 # 自定义UI组件
│  │     ├─ kborderstylecombo.h/.cpp # 边框样式选择框（带预览）——————————————其实就是原来的kborderstylebutton.h/cpp文件
│  │     ├─ kcolorbutton.h/.cpp   # 颜色选择按钮—————————————————————————————通过之前的ksvgeditor.cpp（颜色选择逻辑）、kshapeparameter.cpp（全局颜色存储）
│  │     └─ kparameterwidget.h/.cpp # 属性设置面板（边框宽度/颜色等）————————实现文件：ksvgeditor.cpp（输入框逻辑）、kshapeparameter.cpp（全局宽度存储）
│  ├─ model/                      # *模型层（Model）
│  │  ├─ shapes/                  # *图形模型
│  │  │  ├─ kshape.h/.cpp         # *图形基类（坐标/颜色/边框等属性）
│  │  │  ├─ krect.h/.cpp          # *矩形模型
│  │  │  ├─ kcircle.h/.cpp        # *圆形模型
│  │  │  ├─ khexagon.h/.cpp       # *六边形模型
│  │  │  └─ ...（其他图形子类）
│  │  └─ parameters/              # *参数模型
│  │     └─ kshapeparameter.h/.cpp # *全局绘图参数（单例模式）
│  ├─ controller/                 # 控制器层（Controller）
│  │  └─ ksvgeditorcontroller.h/.cpp # 主控制器（处理用户输入、协调Model与View）
│  └─ utils/                      # 工具类
│     ├─ kshapefactory.h/.cpp     # *图形工厂（创建图形实例）
│     └─ kexportutils.h/.cpp      # 导出工具（PNG/SVG导出）————————————————PNG 导出功能的实现代码位于 SVGEditor/KSVGEditor/ksvgeditor.cpp 文件中，具体函数为 KSVGEditor::onExportPNGBtnClicked
└─ CMakeLists.txt                 # 构建脚本（或.pro/.vcxproj文件）




--------------------------------------
SVGEditor/
├─ README.md                      # *项目说明文档（功能介绍、编译说明）
├─ resources/                     # *资源文件（非代码）
│  └─ icons/                      # *界面图标
│     ├─ rect.png                 # *矩形工具图标
│     ├─ circle.png               # *圆形工具图标
│     └─ ...（其他图形工具图标）
├─ src/                           # 核心源代码
│  ├─ ui/                         # 视图层（View）
│  │  ├─ main/                    # *主窗口
│  │  │  ├─ ksvgeditor.h/.cpp     # *主窗口类（UI布局：工具栏、画布、属性面板）
│  │  │  └─ ksvgeditor.ui         # *Qt Designer界面文件
│  │  ├─ canvas/                  # *画布
│  │  │  └─ kcanvas.h/.cpp        # *画布渲染与鼠标事件处理
│  │  └─ widgets/                 # 自定义UI组件
│  │     ├─ kborderstylecombo.h/.cpp # 边框样式选择框（带预览）
│  │     ├─ kcolorbutton.h/.cpp   # 颜色选择按钮
│  │     └─ kparameterwidget.h/.cpp # 属性设置面板（边框宽度/颜色等）
│  ├─ model/                      # *模型层（Model）
│  │  ├─ shapes/                  # *图形模型
│  │  │  ├─ kshape.h/.cpp         # *图形基类（坐标/颜色/边框等属性）
│  │  │  ├─ krect.h/.cpp          # *矩形模型
│  │  │  ├─ kcircle.h/.cpp        # *圆形模型
│  │  │  ├─ khexagon.h/.cpp       # *六边形模型
│  │  │  └─ ...（其他图形子类）
│  │  └─ parameters/              # *参数模型
│  │     └─ kshapeparameter.h/.cpp # *全局绘图参数（单例模式）
│  ├─ controller/                 # 控制器层（Controller）
│  │  └─ ksvgeditorcontroller.h/.cpp # 主控制器（处理用户输入、协调Model与View）
│  └─ utils/                      # 工具类
│     ├─ kshapefactory.h/.cpp     # *图形工厂（创建图形实例）
│     └─ kexportutils.h/.cpp      # 导出工具（PNG/SVG导出）
└─ CMakeLists.txt                 # 构建脚本（或.pro/.vcxproj文件）
我的环境版本是Qt5.14.2  +  Visual Studio 2019  +  QMake version 3.1  +  cmake version 3.31.0-rc1
把仓库原代码按照这样很精简的MVC架构重构一下，但是文件命名要按照以上结构，不要改变我ui中的任何内容，给出每个代码文件的完整并且具体内容


给我以下文件的绝对完整具体的代码：ksvgeditor.h/.cpp，kcanvas.h/.cpp，kborderstylecombo.h/.cpp，kcolorbutton.h/.cpp
，kparameterwidget.h/.cpp，kshape.h/.cpp，kshapeparameter.h/.cpp，ksvgeditorcontroller.h/.cpp，kshapefactory.h/.cpp
，kexportutils.h/.cpp，krect.h/.cpp，kcircle.h/.cpp，khexagon.h/.cpp，kcircle.h/.cpp,khexagon.h/.cpp,kline.h/.cpp,kpentagram.h/.cpp,krect.h/.cpp



------------------------------------------------------------------------------

我的环境版本是Qt5.14.2 + Visual Studio 2019 + QMake version 3.1 + cmake version 3.31.0-rc1，学习这个开原仓库的项目https://github.com/Changshan-ruchuan/SVGEditor.git，以这个项目为基础，把仓库原代码按照这样很精简的MVC架构重构一下，但是文件命名要按照以上结构，不要改变我ui中的任何内容，给出每个代码文件的完整并且具体内容
SVGEditor/
├─ README.md # *项目说明文档（功能介绍、编译说明）
├─ resources/ # *资源文件（非代码）
│ └─ icons/ # *界面图标
│ ├─ rect.png # *矩形工具图标
│ ├─ circle.png # *圆形工具图标
│ └─ ...（其他图形工具图标）
├─ src/ # 核心源代码
│ ├─ ui/ # 视图层（View）
│ │ ├─ main/ # *主窗口
│ │ │ ├─ ksvgeditor.h/.cpp # *主窗口类（UI布局：工具栏、画布、属性面板）
│ │ │ └─ ksvgeditor.ui # *Qt Designer界面文件
│ │ ├─ canvas/ # *画布
│ │ │ └─ kcanvas.h/.cpp # *画布渲染与鼠标事件处理
│ │ └─ widgets/ # 自定义UI组件
│ │ ├─ kborderstylecombo.h/.cpp # 边框样式选择框（带预览）
│ │ ├─ kcolorbutton.h/.cpp # 颜色选择按钮
│ │ └─ kparameterwidget.h/.cpp # 属性设置面板（边框宽度/颜色等）
│ ├─ model/ # *模型层（Model）
│ │ ├─ shapes/ # *图形模型
│ │ │ ├─ kshape.h/.cpp # *图形基类（坐标/颜色/边框等属性）
│ │ │ ├─ krect.h/.cpp # *矩形模型
│ │ │ ├─ kcircle.h/.cpp # *圆形模型
│ │ │ ├─ khexagon.h/.cpp # *六边形模型
│ │ │ └─ ...（其他图形子类）
│ │ └─ parameters/ # *参数模型
│ │ └─ kshapeparameter.h/.cpp # *全局绘图参数（单例模式）
│ ├─ controller/ # 控制器层（Controller）
│ │ └─ ksvgeditorcontroller.h/.cpp # 主控制器（处理用户输入、协调Model与View）
│ └─ utils/ # 工具类
│ ├─ kshapefactory.h/.cpp # *图形工厂（创建图形实例）
│ └─ kexportutils.h/.cpp # 导出工具（PNG/SVG导出）
└─ CMakeLists.txt # 构建脚本（或.pro/.vcxproj文件）

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
我的环境版本是 Qt5.14.2  +  Visual Studio 2019  +  QMake version 3.1  +  cmake version 3.31.0-rc1，现在新增功能如下：
*1.用户可以通过鼠标滚轮对画布进行缩放-----【新增滚轮放大缩小功能】【ones：1】【无报错，无警告成功】
*2.选中图形后用户可以通过按ctrl+c和ctrl+v实现复制粘贴
3.支持通过 Ctr + A 选中当前画布上的所有图形
*4.用户可以使用 Delete 键来删除选中的图形
*5.仿照圆形增加一个椭圆形的绘制功能
6.用户可以导出svg和打开svg功能
*7.图层功能
给我具体的过程和步骤，以及完整的代码


